# Configuration file (included from Makefile)


# Common configuration
#------------------------------------------------------------------------------
OS_NAME = "Benu"
NAME_MAJOR := $(shell basename "`cd ..; pwd -P`")
NAME_MINOR := $(shell basename "`pwd -P`")
PROJECT := $(NAME_MINOR)

ARCH ?= i386
VERSION = 1.0
AUTHOR = leonardo@zemris.fer.hr

# Intermediate and output files are placed into BUILDDIR
BUILDDIR = build


# Where will system be loaded when started (for which address to prepare it)
LOAD_ADDR = 0x100000

OPTIONALS =

# Devices
#------------------------------------------------------------------------------
#"defines" (which device drivers to compile)
DEVICES = VGA_TEXT I8042 I8259 I8253 UART

#devices interface (variables implementing device_t interface)
DEVICES_DEV = dev_null vga_text_dev uart_com1 i8042_dev

#interrupt controller device
IC_DEV = i8259

#timer device
TIMER = i8253

#initial standard output device (while "booting up")
K_INITIAL_STDOUT = uart_com1
#K_INITIAL_STDOUT = vga_text_dev

#standard output for kernel function (for kprint) - device name
K_STDOUT = COM1
#K_STDOUT = VGA_TXT

#standard output and input devices for programs
U_STDIN = COM1
U_STDOUT = COM1
U_STDERR = COM1
#U_STDIN = i8042
#U_STDOUT = VGA_TXT
#U_STDERR = VGA_TXT


# System resources
#------------------------------------------------------------------------------
MAX_RESOURCES = 1000
KERNEL_STACK_SIZE = 0x1000
PROG_HEAP_SIZE = 0x10000


# System memory (in Bytes)
SYSTEM_MEMORY = 0x800000

# Memory allocators to compile
#------------------------------------------------------------------------------
FIRST_FIT = 1
GMA = 2

#define which to compile
OPTIONALS += FIRST_FIT=$(FIRST_FIT) GMA=$(GMA)


# Library with utility functions (strings, lists, ...)
#------------------------------------------------------------------------------
LIBS = lib lib/mm


# Compiling and linking: common parameters
#------------------------------------------------------------------------------
LINK = ld
LDSCRIPT = $(BUILDDIR)/ARCH/boot/ldscript.ld
LDFLAGS = -melf_i386
LDFLAGS_OPT = -O3 --gc-sections -s
LDFLAGS_OPTD = -O3 --gc-sections

# Compiling and linking: kernel
#------------------------------------------------------------------------------
CC_K = gcc

CFLAGS_K = -m32 -march=i386 -Wall -Werror -nostdinc -ffreestanding -nostdlib -fno-stack-protector -fno-pie

# additional optimization flags
CFLAGS_KOPT = -O3 -fdata-sections -ffunction-sections

#optimization with debug information
CFLAGS_KOPTD = -O3 -fdata-sections -ffunction-sections -g

#if in command line given: debug=yes or/and optimize=yes
ifeq ($(optimize),yes)
ifeq ($(debug),yes) #if both are set!
CFLAGS_K += $(CFLAGS_KOPTD)
LDFLAGS += $(LDFLAGS_OPTD)
CMACROS += DEBUG
else
CFLAGS_K += $(CFLAGS_KOPT)
LDFLAGS += $(LDFLAGS_OPT)
endif
else #debug set by default
CFLAGS_K += -g
CMACROS += DEBUG
endif

# directories to include while compiling kernel
DIRS_K := arch/$(ARCH)/boot arch/$(ARCH) arch/$(ARCH)/drivers \
	  kernel $(LIBS)

# include dirs for kernel ($(BUILDDIR) for ARCH layer)
INCLUDES_K := include $(BUILDDIR)

# Memory allocator for kernel: 'GMA' or 'FIRST_FIT'
MEM_ALLOCATOR_FOR_KERNEL = $(FIRST_FIT)

CMACROS_K += _KERNEL_

# Compiling and linking: programs
#------------------------------------------------------------------------------
CC_U = gcc

CFLAGS_U = -m32 -march=i386 -Wall -Werror -nostdinc -ffreestanding -nostdlib -fno-stack-protector -fno-pie

# additional optimization flags
CFLAGS_UOPT = -O3 -fdata-sections -ffunction-sections

#optimization with debug information
CFLAGS_UOPTD = -O3 -fdata-sections -ffunction-sections -g

#if in command line given: debug=yes or/and optimize=yes
ifeq ($(optimize),yes)
ifeq ($(debug),yes) #if both are set!
CFLAGS_U += $(CFLAGS_UOPTD)
else
CFLAGS_U += $(CFLAGS_UOPT)
endif
else #debug set by default
CFLAGS_U += -g
endif

DIRS_U := api
INCLUDES_U := include/api include $(BUILDDIR)

# Memory allocator for programs: 'GMA' or 'FIRST_FIT'
MEM_ALLOCATOR_FOR_USER = $(GMA)

MAX_USER_DESCRIPTORS = 10

# Programs to include in compilation
PROGRAMS = hello timer keyboard shell args run_all

# Define each program with:
# prog_name =	1_starting-routine	2_directories
hello		= hello_world		programs/hello_world
timer		= timer			programs/timer
keyboard	= keyboard		programs/keyboard
shell		= shell			programs/shell
args		= arguments		programs/arguments
run_all		= run_all		programs/run_all

common		= null			api

CCPROGRAMS = common $(PROGRAMS)

#initial program to be started at end of kernel initialization
START_WITH ?= shell
PROG_START_FUNC = $(START_WITH)

QEMU_MEM = $(shell echo $$(( ($(SYSTEM_MEMORY)-1)/1048576+1 )) )
QEMU = qemu-system-$(ARCH)
QFLAGS = -m $(QEMU_MEM)M -machine accel=tcg -serial stdio -display none
# If using VGA_TXT output remove "-display none" from qemu arguments
QMSG = "Starting qemu"

DEBUG_GDB = gdb
