# Configuration file (included from Makefile)


# Common configuration
#------------------------------------------------------------------------------
OS_NAME = "Benu"
NAME_MAJOR := $(shell basename "`cd ..; pwd -P`")
NAME_MINOR := $(shell basename "`pwd -P`")
PROJECT := $(NAME_MINOR)

ARCH ?= arm
VERSION = 1.0
AUTHOR = leonardo@zemris.fer.hr

# Intermediate and output files are placed into BUILDDIR
BUILDDIR = build


# Where will system be loaded when started (for which address to prepare it)
LOAD_ADDR = 0x10000

OPTIONALS =

# Devices
#------------------------------------------------------------------------------
#"defines" (which device drivers to compile)
DEVICES = UART0 PL190 SP804 PL011

#devices interface (variables implementing device_t interface)
DEVICES_DEV = dev_null uart0_dev pl011_dev

#interrupt controller device
IC_DEV = pl190

#timer device
TIMER = sp804

#initial standard output device (while "booting up")
K_INITIAL_STDOUT = uart0_dev
# pl011_dev can't be initial device since requires interrupt subsystem for
# its initialization! Use uart0_dev which is simpler driver and doesn't require
# initialization. But after switching to pl011_dev do not use uart0_dev!

#standard output for kernel function (for kprint) - device name
K_STDOUT = PL011

#standard output and input devices for programs
U_STDIN = PL011
U_STDOUT = PL011
U_STDERR = PL011


# System resources
#------------------------------------------------------------------------------
MAX_RESOURCES = 1000
STACK_SIZE = 0x1000
MAX_USER_DESCRIPTORS = 10


# System memory (in Bytes)
SYSTEM_MEMORY = 0x800000

# Memory allocators to compile
#------------------------------------------------------------------------------
FIRST_FIT = 1
GMA = 2

#define which to compile
OPTIONALS += FIRST_FIT=$(FIRST_FIT) GMA=$(GMA)


# Library with utility functions (strings, lists, ...)
#------------------------------------------------------------------------------
LIBS = lib lib/mm


# Compiling and linking
#------------------------------------------------------------------------------
# assuming "gcc-arm-none-eabi" tools are used
# Sourcery_CodeBench_Lite_for_ARM_EABI can be also used -- look in README file
LINK = arm-none-eabi-ld
LDSCRIPT = $(BUILDDIR)/ARCH/boot/ldscript.ld
LDFLAGS = -marmelf -lgcc

# if you know path for library you can set it here, e.g.:
#    LDFLAGS += -L/usr/lib/gcc/arm-none-eabi/4.8.2/
# or you can try with the following script:
TOOLPATH := $(shell command -v arm-none-eabi-gcc;)
ifeq ($(strip $(TOOLPATH)),)
$(error "Can't find: arm-none-eabi-gcc")
endif
DIR1 := $(shell dirname "$(shell dirname "$(TOOLPATH)")")/lib/gcc/arm-none-eabi/
LIB1 := $(DIR1)$(shell ls "$(DIR1)")
LDFLAGS += -L$(LIB1)
#------------------------------------------------------------------------------

LDFLAGS_OPT = -O3 -s
LDFLAGS_OPTD = -O3

CC = arm-none-eabi-gcc

CFLAGS = -mcpu=arm926ej-s -Wall -Werror -nostdinc -ffreestanding -nostdlib -fno-stack-protector -fno-pie -mabi=aapcs-linux

# additional optimization flags
CFLAGS_OPT = -O3

#optimization with debug information
CFLAGS_OPTD = -O3 -g

# Linker flags
#if in command line given: debug=yes or/and optimize=yes
ifeq ($(optimize),yes)
ifeq ($(debug),yes) #if both are set!
CFLAGS += $(CFLAGS_OPTD)
LDFLAGS += $(LDFLAGS_OPTD)
CMACROS += DEBUG
else
CFLAGS += $(CFLAGS_OPT)
LDFLAGS += $(LDFLAGS_OPT)
endif
else #debug set by default
CFLAGS += -g
CMACROS += DEBUG
endif


# directories to include while compiling
DIRS_K := arch/$(ARCH)/boot arch/$(ARCH) arch/$(ARCH)/drivers \
	kernel $(LIBS)
DIRS_P := api programs/hello_world programs/timer programs/keyboard \
	programs/shell programs/arguments

DIRS := $(DIRS_K) $(DIRS_P)

# include dirs
INCLUDES := include $(BUILDDIR) include/api

# Memory allocators: 'GMA' or 'FIRST_FIT'
MEM_ALLOCATOR = $(FIRST_FIT)
#MEM_ALLOCATOR = $(GMA)

#initial program to be started at end of kernel initialization
START_WITH ?= shell
PROG_START_FUNC = $(START_WITH)

QEMU_MEM = $(shell echo $$(( ($(SYSTEM_MEMORY)-1)/1048576+1 )) )
QEMU = qemu-system-$(ARCH)
QFLAGS = -M versatilepb -m $(QEMU_MEM)M -nographic
QMSG = "Starting qemu ... (press Ctrl+a then x to stop)"

DEBUG_GDB = arm-none-eabi-gdb
