# Configuration file (included from Makefile)


# Common configuration
#------------------------------------------------------------------------------
OS_NAME = "Benu"
NAME_MAJOR := $(shell basename "`cd ..; pwd -P`")
NAME_MINOR := $(shell basename "`pwd -P`")
PROJECT := $(NAME_MINOR)

ARCH ?= i386
VERSION = 1.0
AUTHOR = leonardo@zemris.fer.hr

# Intermediate and output files are placed into BUILDDIR
BUILDDIR = build


# Where will system be loaded when started (for which address to prepare it)
LOAD_ADDR = 0x100000

OPTIONALS =

# Devices
#------------------------------------------------------------------------------
#"defines" (which device drivers to compile)
DEVICES = VGA_TEXT I8259 I8253

#interrupt controller device
IC_DEV = i8259

#timer device
TIMER = i8253

#initial standard output device (while "booting up")
K_INITIAL_STDOUT = vga_text

#standard output for kernel function (for kprint) - device name
K_STDOUT = vga_text

#standard output and input devices for programs
U_STDOUT = vga_text
U_STDERR = dev_null


# System resources
#------------------------------------------------------------------------------
STACK_SIZE = 0x1000


# System memory (in Bytes)
SYSTEM_MEMORY = 0x800000

# Memory allocators to compile
#------------------------------------------------------------------------------
FIRST_FIT = 1
GMA = 2

#define which to compile
OPTIONALS += FIRST_FIT=$(FIRST_FIT) GMA=$(GMA)


# Library with utility functions (strings, lists, ...)
#------------------------------------------------------------------------------
LIBS = lib lib/mm


# Compiling and linking
#------------------------------------------------------------------------------
LINK = ld
LDSCRIPT = $(BUILDDIR)/ARCH/boot/ldscript.ld
LDFLAGS = -melf_i386
LDFLAGS_OPT = -O3 --gc-sections -s
LDFLAGS_OPTD = -O3 --gc-sections

CC = gcc

CFLAGS = -m32 -march=i386 -Wall -Werror -nostdinc -ffreestanding -nostdlib -fno-stack-protector -fno-pie

# additional optimization flags
CFLAGS_OPT = -O3 -fdata-sections -ffunction-sections

#optimization with debug information
CFLAGS_OPTD = -O3 -fdata-sections -ffunction-sections -g

# Linker flags
#if in command line given: debug=yes or/and optimize=yes
ifeq ($(optimize),yes)
ifeq ($(debug),yes) #if both are set!
CFLAGS += $(CFLAGS_OPTD)
LDFLAGS += $(LDFLAGS_OPTD)
CMACROS += DEBUG
else
CFLAGS += $(CFLAGS_OPT)
LDFLAGS += $(LDFLAGS_OPT)
endif
else #debug set by default
CFLAGS += -g
CMACROS += DEBUG
endif


# directories to include while compiling
DIRS_K := arch/$(ARCH)/boot arch/$(ARCH) arch/$(ARCH)/drivers \
	kernel $(LIBS)
DIRS_P := api programs/hello_world programs/timer

DIRS := $(DIRS_K) $(DIRS_P)

# include dirs
INCLUDES := include $(BUILDDIR) include/api

# Memory allocators: 'GMA' or 'FIRST_FIT'
MEM_ALLOCATOR = $(FIRST_FIT)
#MEM_ALLOCATOR = $(GMA)

QEMU_MEM = $(shell echo $$(( ($(SYSTEM_MEMORY)-1)/1048576+1 )) )
QEMU = qemu-system-$(ARCH)
QFLAGS = -m $(QEMU_MEM)M -machine accel=tcg
QMSG = "Starting qemu (pop-up window)"

DEBUG_GDB = gdb
